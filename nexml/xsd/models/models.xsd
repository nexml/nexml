<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    targetNamespace="http://www.nexml.org/1.0"
    xmlns="http://www.nexml.org/1.0" 
    xmlns:xml="http://www.w3.org/XML/1998/namespace">
    <xs:annotation>
        <xs:documentation>
            This module is highly experimental. It is intended to define
            the building blocks that go into expressions of substitution
            models. The module imports types from the 
            <a href="http://www.w3.org/1998/Math/MathML">MathML</a> expression
            namespace. The general idea is that a substitution model would
            first define the character states it operates on (this is done
            by re-using the &lt;format&gt; element structure from the 
            <a href="../characters">characters</a> modules). Subsequently,
            various parameters (rates, frequencies) are defined. These parameters
            are passed through MathML expressions, the output of which is 
            referenced in n x n rate matrices.
        </xs:documentation>
    </xs:annotation>
    
    <xs:include schemaLocation="../characters/characters.xsd"/>
    <xs:import namespace="http://www.w3.org/1998/Math/MathML" schemaLocation="http://www.w3.org/Math/XMLSchema/mathml2/mathml2.xsd"/>
    
    <xs:complexType name="AbstractParameter" abstract="true">
        <xs:annotation>
            <xs:documentation>
                This is an abstract parameter, which is an extension of 
                the Labelled class.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="xs:anyType">
                <xs:attribute name="id" type="xs:NCName" use="required"/>
                <xs:attribute name="lower" type="xs:double" use="optional"/>
                <xs:attribute name="upper" type="xs:double" use="optional"/>             
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="Float" abstract="false">
        <xs:annotation>
            <xs:documentation>
                This is a floating point input parameter.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="AbstractParameter">
                <xs:attribute name="value" type="xs:float" use="optional"/>
            </xs:extension>            
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="Double" abstract="false">
        <xs:annotation>
            <xs:documentation>
                This is a double input parameter.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="AbstractParameter">
                <xs:attribute name="value" type="xs:double" use="optional"/>
            </xs:extension>            
        </xs:complexContent>
    </xs:complexType>    
    
    <xs:simpleType name="ZeroOneInclusive">
        <xs:annotation>
            <xs:documentation>
                This is a simple float value between 0 and 1 (inclusive).
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:float">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="1"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:complexType name="Frequency">
        <xs:annotation>
            <xs:documentation>
                This is a parameter element type that is interpreted as a 
                frequency, and so its value attribute is constrained to be 
                between 0 and 1 (inclusive).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:restriction base="AbstractParameter">
                <!--<xs:attribute name="value" type="ZeroOneInclusive" use="required"/>-->                
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="Rate">
        <xs:annotation>
            <xs:documentation>
                This is a parameter element type that is interpreted as a 
                rate, and so its value attribute is constrained to be 
                between 0 and 1 (inclusive).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:restriction base="AbstractParameter">
                <xs:attribute name="expr" type="xs:NCName" use="required"/>
            </xs:restriction>
        </xs:complexContent>        
    </xs:complexType>
    
    <xs:complexType name="StateSubstitutionRate">
        <xs:annotation>
            <xs:documentation>
                This is parameter element type used as a substitution rates 
                for a state.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="xs:anyType">
                <xs:attribute name="state" type="xs:NCName" use="required"/>
                <xs:attribute name="expr" type="xs:NCName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="StateFrequency">
        <xs:annotation>
            <xs:documentation>
                This is a state frequency element, i.e. a parameter element
                type that is interpreted as a frequency - and so its value 
                attribute is constrained to be between 0 and 1 (inclusive) - 
                extended to require a "state" attribute which is an id 
                reference to link to a character state defined earlier.               
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="Frequency">
                <xs:attribute name="state" type="xs:NCName" use="required"/>
                <xs:attribute name="expr" type="xs:NCName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="StateFrequencyList">
        <xs:annotation>
            <xs:documentation>
                A list of state frequency elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:sequence>
                    <xs:element name="freq" type="StateFrequency" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="Probability">
        <xs:annotation>
            <xs:documentation>
                This is a parameter element type that is interpreted as a 
                probability, and so its value attribute is constrained to be 
                between 0 and 1 (inclusive).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:restriction base="AbstractParameter">
                <xs:attribute name="value" type="ZeroOneInclusive" use="required"/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>    
    
    <xs:complexType name="ParameterGroup">
        <xs:annotation>
            <xs:documentation>
                This is a group of parameters, which differs from a list in that a 
                list is ordered (for later reference, perhaps) but doesn't impose
                numerical constraints on its contents, whereas a group's contents
                order is irrelevant, but the container my impose constraints (such
                as that the values sum to one, e.g. for a group of probabilities).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:choice>
                    <xs:element name="param" minOccurs="1" maxOccurs="unbounded" type="AbstractParameter"/>
                </xs:choice>                
                <xs:attribute name="sum" type="xs:double" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>    
    
    <xs:complexType name="ParameterList">
        <xs:annotation>
            <xs:documentation>
                This is a list of parameters of the same source, which would be 
                use for example to define a vector of rate categories from a gamma
                function.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:sequence>
                    <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="param" minOccurs="0" maxOccurs="unbounded" type="AbstractParameter"/>
                        <xs:element name="paramgroup" minOccurs="0" maxOccurs="unbounded" type="ParameterGroup"/>
                    </xs:choice>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="RateList">
        <xs:annotation>
            <xs:documentation>
                This is a subclass of the Labelled class, extended to require
                a state attribute that links to a state defined earlier.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="Labelled">
                <xs:sequence>
                    <xs:element name="to" type="StateSubstitutionRate" minOccurs="0" maxOccurs="unbounded"/>                    
                </xs:sequence>
                <xs:attribute name="state" use="required" type="xs:NCName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="ParameterMatrix">
        <xs:annotation>
            <xs:documentation>
                This is some sort of array or multidimensional 
                matrix of ParameterLists.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="Labelled">
                <xs:sequence>
                    <xs:element name="from" minOccurs="1" maxOccurs="unbounded" type="RateList">
                        <xs:key name="UniqueStateRefsForTo">
                            <xs:selector xpath="./to"/>
                            <xs:field xpath="@state"/>
                        </xs:key>                        
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>    
    
    <xs:complexType name="RateMatrix">
        <xs:annotation>
            <xs:documentation>
                This is a substitution rate matrix, which inherits
                from ParameterMatrix.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="ParameterMatrix">
                <xs:attribute name="scalable" use="required" type="xs:boolean"/>
                <xs:attribute name="id" use="required" type="xs:NCName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="CharacterStateDictionary">
        <xs:annotation>
            <xs:documentation>
                This is used to specify a list of allowed states (state_names), 
                and a parallel array of their (observed?) frequencies.                 
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:sequence>
                    <xs:element name="states" type="AbstractStates" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="frequencies" type="ParameterList" minOccurs="1" maxOccurs="1"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>                       
    </xs:complexType>
    
    <xs:complexType name="Model">
        <xs:annotation>
            <xs:documentation>
                A substitution model specification.
            </xs:documentation>
        </xs:annotation>   
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:sequence>
                    <xs:element name="states" type="AbstractStates" minOccurs="1" maxOccurs="1"/>   
                    <xs:element name="parameters" type="ParameterList" minOccurs="1" maxOccurs="1"/>
                    <xs:element name="expressions" type="xs:anyType" minOccurs="1" maxOccurs="1"/>                 
                    <xs:element name="frequencies" type="StateFrequencyList" minOccurs="1" maxOccurs="1"/>                    
                    <xs:element name="rmatrix" type="RateMatrix" minOccurs="1" maxOccurs="1"/>                    
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="Models">
        <xs:annotation>
            <xs:documentation>
                A container for substitution models.
            </xs:documentation>            
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="IDTagged">
                <xs:sequence>
                    <xs:element name="model" type="Model" minOccurs="1" maxOccurs="unbounded">
                        
                        <xs:key name="UniqueStateRefsForFreq">
                            <xs:annotation>
                                <xs:documentation>
                                    This key asserts unicity for the "state" attribute of "freq" elements within
                                    the scope of the enclosing "frequencies" element. 
                                </xs:documentation>
                            </xs:annotation>
                            <xs:selector xpath="./frequencies/freq"/>
                            <xs:field xpath="@state"/>
                        </xs:key>  
                        <xs:keyref refer="UniqueStateIds" name="KeyStateRefsForFreq">
                            <xs:annotation>
                                <xs:documentation>
                                    This foreign key constraint asserts that the "state" attribute of "freq"
                                    elements within "frequencies" elements refers to existing "id" attributes
                                    of "state" elements.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:selector xpath="./frequencies/freq"/>
                            <xs:field xpath="@state"/>
                        </xs:keyref>
                                                
                        <xs:key name="UniqueStateRefsForFrom">
                            <xs:annotation>
                                <xs:documentation>
                                    This key asserts unicity for the "state" attribute of "from" elements within
                                    the scope of the enclosing "rmatrix" element.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:selector xpath="./rmatrix/from"/>
                            <xs:field xpath="@state"/>
                        </xs:key> 
                        <xs:keyref refer="UniqueStateIds" name="KeyStateRefsForFrom">
                            <xs:annotation>
                                <xs:documentation>
                                    This foreign key constraint asserts that the "state" attribute of "from"
                                    elements within "rmatrix" elements refers to existing "id" attributes
                                    of "state" elements.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:selector xpath="./rmatrix/from"/>
                            <xs:field xpath="@state"/>
                        </xs:keyref>                        
                        
                        <xs:key name="UniqueStateIds">
                            <xs:annotation>
                                <xs:documentation>
                                    This key asserts the unicity for the "id" attribute of "state" elements within
                                    the scope of the enclosing "states" element.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:selector xpath="./states/state"/>
                            <xs:field xpath="@id"/>
                        </xs:key>                       
                                                                            
                                                                    
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
       
    <!--  
        HMM: This is a Hidden Markov Model
    -->   
    
    <!--
        DataMap: The DataMap captures the interactions between two 
        or more characters expressed in terms of a covariance matrix 
        and estimated model parameters. 
    -->
        
    <!-- 
        To be implemented other than through a direct mapping of 
        ontology onto xsd.
        
        Edge: This is a branch in a tree (i.e. topology), to which 
        we can attach the bits that go into a single model, but we 
        can mix and match in order to specify a mixture model (with 
        ratios as weight). This type is 
        defined in the ontology, but doesn't need re-implementation
        in this file as it is defined elsewhere in the schema.     
        
        Topology: This is a tree shape, we would use this to 
        organize edges, to which we can link models. This type is 
        defined in the ontology, but doesn't need re-implementation
        in this file as it is defined elsewhere in the schema.              
        
        CharacterEvolutionModel: a link between edges/trees and models.
    -->
    <xs:element name="model" type="Model"/>

</xs:schema>